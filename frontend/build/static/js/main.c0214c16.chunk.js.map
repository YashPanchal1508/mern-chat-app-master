{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","concat","setItem","stringify","error","description","response","message","isLoading","variant","Signup","setActiveTab","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","p","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","activeTab","Container","maxW","centerContent","Box","d","justifyContent","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","index","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","ENDPOINT","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","event","key","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","getSenderFull","Chatbox","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.c0214c16.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nconst ENDPOINT = 'https://mern-chat-app-backend-rgba.onrender.com'\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n      `${ENDPOINT}/api/user/login`,\n        { email, password },\n        config\n      );\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n      setEmail('')\n      setPassword('')\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User Credentials\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nconst ENDPOINT = 'https://mern-chat-app-backend-rgba.onrender.com'\n\nconst Signup = ({setActiveTab}) => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n  \n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        `${ENDPOINT}/api/user`,\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      console.log(data)\n      setPicLoading(false);\n      // history.push('/chats')\n      setActiveTab(0)\n      setName('')\n      setConfirmpassword('')\n      setEmail('')\n      setPassword('')\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","// import {\n//   Box,\n//   Container,\n//   Tab,\n//   TabList,\n//   TabPanel,\n//   TabPanels,\n//   Tabs,\n//   Text,\n// } from \"@chakra-ui/react\";\n// import { useEffect, useState } from \"react\";\n// import { useHistory } from \"react-router\";\n// import Login from \"../components/Authentication/Login\";\n// import Signup from \"../components/Authentication/Signup\";\n\n// function Homepage() {\n//   const history = useHistory();\n//   const [activeTab, setActiveTab] = useState(1); // Set initial active tab to signup\n\n//   useEffect(() => {\n//     const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n//     if (user) history.push(\"/chats\");\n//   }, [history]);\n\n//   const handleLogin = () => {\n//     setActiveTab(0)\n//     console.log(activeTab)\n//   }\n//   const handleRegister = () => {\n//     setActiveTab(1)\n//   }\n//   return (\n//     <Container maxW=\"xl\" centerContent>\n//       <Box\n//         d=\"flex\"\n//         justifyContent=\"center\"\n//         p={3}\n//         bg=\"white\"\n//         w=\"100%\"\n//         m=\"40px 0 15px 0\"\n//         borderRadius=\"lg\"\n//         borderWidth=\"1px\"\n//       >\n//         <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n//           Talk-A-Tive\n//         </Text>\n//       </Box>\n//       <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\" >\n//         <Tabs isFitted variant=\"soft-rounded\" index={activeTab}>\n//           <TabList mb=\"1em\">\n//             <Tab>Login</Tab>\n//             <Tab>Sign Up</Tab>\n//           </TabList>\n//           <TabPanels>\n//             <TabPanel onClick={handleLogin}>\n//               <Login />\n//             </TabPanel>\n//             <TabPanel onClick={handleRegister}>\n//               <Signup setActiveTab={setActiveTab} />\n//             </TabPanel>\n//           </TabPanels>\n//         </Tabs>\n//       </Box>\n//     </Container>\n//   );\n// }\n\n// export default Homepage;\n\nimport {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n  const [activeTab, setActiveTab] = useState(1); // Set initial active tab to signup\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  const handleTabChange = (index) => {\n    setActiveTab(index);\n  };\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"white\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n          Talk-A-Tive\n        </Text>\n      </Box>\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs\n          isFitted\n          variant=\"soft-rounded\"\n          index={activeTab}\n          onChange={handleTabChange}\n        >\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup setActiveTab={setActiveTab} />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction, user }) => {\n  const { name, email, pic } = user[0]; // Destructure the properties from searchResult object\n \n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={name} // Use the name property\n        src={pic} // Use the pic property\n      />\n      <Box>\n        <Text>{name}</Text> {/* Use the name property */}\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {email} {/* Use the email property */}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const ENDPOINT = 'https://mern-chat-app-backend-rgba.onrender.com'\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`${ENDPOINT}/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `${ENDPOINT}/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `${ENDPOINT}/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `${ENDPOINT}/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"https://mern-chat-app-backend-rgba.onrender.com\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `${ENDPOINT}/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n         `${ENDPOINT}/api/message`,\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n  const ENDPOINT = 'https://mern-chat-app-backend-rgba.onrender.com'\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `${ENDPOINT}/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = 'https://mern-chat-app-backend-rgba.onrender.com'\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`${ENDPOINT}/api/chat`, config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nconst ENDPOINT = 'https://mern-chat-app-backend-rgba.onrender.com'\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n     \n\n      const { data } = await axios.get(`${ENDPOINT}/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n      console.log(data)\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`${ENDPOINT}/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          Talk-A-Tive\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={searchResult}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}